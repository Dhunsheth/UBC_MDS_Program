part_3_4_data <- dbGetQuery(con_sqlite,"SELECT * FROM part_3_sqlite")
part_3_4_data[1:10,]
part_5_query <- "
select *
from part_3_sqlite
where year = 2018 and ps_availqty < shippedQuantity
limit 5
"
part_5_data <- dbGetQuery(con_sqlite, part_5_query)
print('Products with insufficient inventory based on 2018 sales:')
part_5_data
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
part_6_data
part_6_reg <- lm(shippedQuantity ~ year, data=part_6_data[2:6,])
reg_est_2019 <- part_6_reg$coefficients[2] * 2019 + part_6_reg$coefficients[1]
reg_est_2019
part_6_data[2:6,]
part_6_query <- "
select year, shippedQuantity
from part_3_sqlite
where ps_partkey = 217 and ps_suppkey = 18
"
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
part_6_reg <- lm(shippedQuantity ~ year, data=part_6_data)
summary(part_6_reg)
reg_est_2019 <- part_6_reg$coefficients[2] * 2019 + part_6_reg$coefficients[1]
reg_est_2019
part_6_data
x <- rnorm(100)
x2 <- x^2
y <- 4+x+x2
plot(y~x)
reg <- lm(y~x+x2)
xx <- seq(-2,2, length.out=250)
lines(xx, predict(reg))
xx <- seq(-2,2, length.out=100)
lines(xx, predict(reg))
lines(xx, predict(lm(y~x+x2)))
xx <- seq(-2,2)
lines(xx, predict(lm(y~x+x2)))
lines(xx, predict(lm(y˜x+x2,
lines(xx, predict(lm(y~x+x2,
data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2,data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2)), data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2), data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2), data.frame(x=xx)), col="red")
xx <- seq(-2,2, length.out=100)
lines(xx, predict(lm(y~x+x2), data.frame(x=xx)), col="red")
lm(log(y)~x+I(x^2))
glm(y~x+I(x^2),family=poisson)
plot(y~x)
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(y~x+I(xˆ2)), data.frame(x=xx)), col="red")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(y~x+I(x^2)), data.frame(x=xx)), col="red")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(log(y)~x+I(x^2)), data.frame(x=xx)), col="green")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(log(y)~x+I(x^2)), data.frame(x=xx)), col="green")
plot(y~x)
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(log(y)~x+I(x^2)), data.frame(x=xx)), col="green")
reg_log <- lm(log(y)~x+I(x^2))
xx <- seq(-2,2, length.out=250)
lines(xx, predict(reg_log), data.frame(x=xx)), col="green")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(reg_log), data.frame(x=xx)), col="red")
x <- rnorm(100)
x2 <- x^2
exp(y) <- 2+x+x2
y <- exp(2+x+x2)
plot(y~x)
lm(log(y)~x+I(x^2))
glm(y~x+I(x^2), family=poisson)
cig.glm <- glm(x~d, family = poisson)
x <- cigbutts$count; d <- cigbutts$distance
logit(y)
help(logit)
??log
help(log)
help(logit)
x <- rnorm(100)
y<- 2+x+x^2+runif(100)
plot(y~x)
lm(log(y)~x+I(x^2))
glm(y~x+I(x^2),family=poisson)
help(gaussian)
glm(y~x+I(x^2),family=gaussian)
plot(gaussian())
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
glm(n~x, family = poisson)
lm(log(n)~x)
x <- rnorm(100)
lamda <- exp(2+x+x^2)
n <- rpois(100, lamda)
glm(n~x+I(x^2), family = poisson)
lm(log(n)~x+I(x^2))
glm(n~x+I(x^2), family = gaussian)
plot(n~x)
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
plot(n~x)
glm(n~x, family = poisson)
lm(log(n)~x)
x <- rnorm(100)
lamda <- exp(1-x-x^2)
n <- rpois(100, lamda)
plot(n~x)
glm(n~x+I(x^2), family = poisson)
lm(log(n)~x+I(x^2))
x <- rnorm(100)
lamda <- exp(1+x+x^2)
n <- rpois(100, lamda)
plot(n~x)
glm(n~x+I(x^2),family=gaussian)
help("gaussian")
x <- rnorm(100)
y<-2+x+x^2+runif(100)
plot(y~x)
lm(y~x+I(x^2))
glm(y~x+I(x^2, family=gaussian)
)
glm(y~x+I(x^2), family=gaussian)
runif(100)
rnorm(100)
rnorm(100,0,1)
y<-2+x+x^2+rnorm(100)
plot(y~x)
plot(y~x)
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_3/data_581/submissions/lab_1")
changes <- diff(LakeHuron)
len(changes)
size(changes)
changes
count(changes)
changes.size
changes.size()
type(changes)
knitr::opts_chunk$set(echo = TRUE)
SEcalculator <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
sd(xResample)
}
EstAndSE <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
list(estimate = FUN(x), SE = sd(xResample))
}
SEcalculator <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
sd(xResample)
}
changes <- diff(LakeHuron)
standard_error_function <- SEcalculator(changes, mean)
usual_standard_error <- sd(changes)/sqrt()
size(changes)
length(changes)
SEcalculator <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
sd(xResample)
}
changes <- diff(LakeHuron)
standard_error_function <- SEcalculator(changes, mean)
print(standard_error_function)
usual_standard_error <- sd(changes)/sqrt(length(changes))
print(usual_standard_error)
var_standard_error_function <- SEcalculator(changes, var)
print(var_standard_error_function)
changes
quantile(x,90)
quantile(x,0.9)
quantile(x,0.1)
q90 <- function(x, N=1000){
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- quantile(sample(x, size = length(x), replace=TRUE), 0.9)
}
list(estimate = quantile(x, 0.9), SE = sd(xResample))
}
quant_90 <- q90(changes)
print(quant_90$estimate)
print(quant_90$SE)
quant_90
p <- (0.2, 0.7, 0.9)
p <- (0.2 0.7 0.9)
p <- [0.2 0.7 0.9]
p <- [0.2, 0.7, 0.9]
p <- c(0.2, 0.7, 0.9)
p
p <- c(0.2, 0.7, 0.9)
x1 <- 1
x2 <- 0
pdf <- (p^x1*(1-p)-x1)*(p^x2*(1-p)-x2)
pdf
dbinom(1,1,0.2)
dbinom(1,1,0.7)
dbinom(0,1,0.7)
p <- c(0.2, 0.7, 0.9)
x1 <- 1
x2 <- 0
pdf <- ((p^x1)*((1-p)^(1-x1)))*((p^x2)*((1-p)^(1-x2)))
p <- c(0.2, 0.7, 0.9)
x1 <- 1
x2 <- 0
pdf_vals <- ((p^x1)*((1-p)^(1-x1)))*((p^x2)*((1-p)^(1-x2)))
print(pdf_vals)
100^0
0.2*0.8
0.7*0.3
0.9*0.1
library(MPV) # loads MPV
library(MPV)
install.packages("MPV") # if MPV is not installed
install.packages("boot")
knitr::opts_chunk$set(echo = TRUE)
library(MPV) # loads MPV
library(boot)
SEcalculator <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
sd(xResample)
}
EstAndSE <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
list(estimate = FUN(x), SE = sd(xResample))
}
help(p13.2)
p13.2
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
p13.glm
p13.glm$coefficients
p13.glm$coefficients[[1]]
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
print("logit(x) = ", p13.glm$coefficients[[1]],  "+", p13.glm$coefficients[[2]],
"*x")
p13.glm$coefficients[[1]]
round(p13.glm$coefficients[[1]],2)
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
print("logit(x) = ", round(p13.glm$coefficients[[1]],4),  "+",
p13.glm$coefficients[[2]], "*x")
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
print("logit(x) = ", round(p13.glm$coefficients[[1]],4)  "+",
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
b0 <- round(p13.glm$coefficients[[1]],4)
b1 <- round(p13.glm$coefficients[[2]],4)
print("logit(x) = ", b0,"+",b1, "*x")
b0
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
b0 <- str(round(p13.glm$coefficients[[1]],4))
b1 <- str(round(p13.glm$coefficients[[2]],4))
print("logit(x) = ", b0,"+",b1, "*x")
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
b0 <- str(round(p13.glm$coefficients[[1]],4))
b1 <- str(round(p13.glm$coefficients[[2]],4))
print("logit(x) = %s", b0," + %s",b1, " *x")
help(boot)
length(x)
x <- c(12, 14, 14, 15, 18, 21, 25, 29, 32, 35)
length(x)
set.seed(123) # use this seed replicate same result
x <- c(12, 14, 14, 15, 18, 21, 25, 29, 32, 35)
#define function to return mean,
myMean <- function(x,i){mean(x[i])}
weights <- rnorm(length(x))
result <- boot(x, weights, 200)
y<- c(x,weights)
y
set.seed(123) # use this seed replicate same result
x <- c(12, 14, 14, 15, 18, 21, 25, 29, 32, 35)
#define function to return mean,
myMean <- function(x,i){mean(x[i])}
weights <- rnorm(length(x))
result <- boot(x, myMean, 200)
result
x
median(x)
set.seed(123)
x <- c(12, 14, 14, 15, 18, 21, 25, 29, 32, 35)
#define function to return median
myMedian <- function(x,i){median(x[i])}
result <- boot(x, myMedian, 200)
result
results
result$statistic()
result$t0
result$t
result$R
result$weights
result
result$statistic(x,i)
result[1]
result[2]
result[3]
result[4]
result[5]
result[6]
result[7]
result[8]
result[9]
result[10]
result[11]
result[12]
result[13]
results
result
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_3/data_571/submissions/assignment_1")
contain_var_norm <- contain_var_boot <- rep(NA, 1000)
contain_var_norm
set.seed(2023)
norm_var_ci <- boot_var_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
norm_var_ci[i, 1] <- (25-1)*var(dumx)/qchisq(0.975, 25-1)
norm_var_ci[i, 2] <- (25-1)*var(dumx)/qchisq(0.025, 25-1)
dumboot <- bootstrap(dumx, 1000, var)
boot_var_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_var_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
install.packages("bootstrap")
set.seed(2023)
norm_var_ci <- boot_var_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
norm_var_ci[i, 1] <- (25-1)*var(dumx)/qchisq(0.975, 25-1)
norm_var_ci[i, 2] <- (25-1)*var(dumx)/qchisq(0.025, 25-1)
dumboot <- bootstrap(dumx, 1000, var)
boot_var_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_var_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
library(bootstrap)
set.seed(2023)
norm_var_ci <- boot_var_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
norm_var_ci[i, 1] <- (25-1)*var(dumx)/qchisq(0.975, 25-1)
norm_var_ci[i, 2] <- (25-1)*var(dumx)/qchisq(0.025, 25-1)
dumboot <- bootstrap(dumx, 1000, var)
boot_var_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_var_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
contain_var_norm <- contain_var_boot <- rep(NA, 1000)
for(i in 1:1000){
contain_var_norm[i] <- norm_var_ci[i, 1] <= 1/12 & 1/12 <= norm_var_ci[i, 2]
contain_var_boot[i] <- boot_var_ci[i, 1] <= 1/12 & 1/12 <= boot_var_ci[i, 2]
}
sum(contain_var_norm)
sum(contain_var_boot)
norm_var_ci
norm_var_ci[0]
norm_var_ci[1]
norm_var_ci[2]
knitr::opts_chunk$set(echo = TRUE)
set.seed(2023)
for(i in 1:3){
dumx <- runif(25)
print(dumx)
}
boot_var_ci
dumboot
knitr::opts_chunk$set(echo = TRUE)
library(bootstrap)
set.seed(2023)
norm_var_ci <- boot_var_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
norm_var_ci[i, 1] <- (25-1)*var(dumx)/qchisq(0.975, 25-1)
norm_var_ci[i, 2] <- (25-1)*var(dumx)/qchisq(0.025, 25-1)
dumboot <- bootstrap(dumx, 1000, var)
boot_var_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_var_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
ci_normal_975 <- mean(norm_var_ci[i, 1])
ci_normal_025 <-  mean(norm_var_ci[i, 2])
ci_boot_975 <- mean(boot_var_ci[i, 1])
ci_boot_025 <-  mean(boot_var_ci[i, 2])
ci_normal_025
ci_normal_975
ci_boot_975
ci_boot_025
set.seed(2023)
theoritical <- boot_max_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
dumboot <- bootstrap(dumx, 1000, max)
boot_max_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_max_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
boot_max_ci
set.seed(2023)
theoritical <- boot_max_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
dumboot <- bootstrap(dumx, 1000, max)
boot_max_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_max_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
theoritical[i,1] <- max(dumx)
theoritical[i,2] <- max(dumx)/(0.05^(1/25))
}
mean(theoritical)
theoritical
theoritical[,1]
mean(theoritical[,1])
mean(theoritical[,2])
mean(theoritical)
mean(boot_max_ci)
mean(boot_max_ci[,1])
ci_normal_975
ci_normal_025
knitr::opts_chunk$set(echo = TRUE)
library(bootstrap)
set.seed(2023)
norm_var_ci <- boot_var_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
norm_var_ci[i, 1] <- (25-1)*var(dumx)/qchisq(0.975, 25-1)
norm_var_ci[i, 2] <- (25-1)*var(dumx)/qchisq(0.025, 25-1)
dumboot <- bootstrap(dumx, 1000, var)
boot_var_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_var_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
ci_normal_975 <- mean(norm_var_ci[i, 1])
ci_normal_025 <-  mean(norm_var_ci[i, 2])
ci_boot_975 <- mean(boot_var_ci[i, 1])
ci_boot_025 <-  mean(boot_var_ci[i, 2])
set.seed(2023)
theoritical <- boot_max_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(25)
dumboot <- bootstrap(dumx, 1000, max)
boot_max_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_max_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
theoritical[i,1] <- max(dumx)
theoritical[i,2] <- max(dumx)/(0.05^(1/25))
}
example <- 1:1000000000
example
example <- 1:1000000000
example
cvlm <- list()
msecvR <- NA
for(i in 1:nrow(X)){
cvtop10 <- which(rank(cor(cbind(Y[-i], X[-i,]))[-1,1]) %in% 1:10)
cvXtop10 <- data.frame(X[, cvtop10])
cvY <- Y[-i]
cvlm[[i]] <- lm(cvY ~., data=cvXtop10[-i,])
msecvR[i] <- (predict(cvlm[[i]], newdata=cvXtop10[i,]) - Y[i])^2
}
set.seed(32531)
X <- matrix(rnorm(100000), nrow=50, ncol=2000)
Y <- rnorm(50)
top10 <- which(rank(cor(cbind(Y, X))[-1,1]) %in% 1:10)
cvlm <- list()
msecvW <- NA
Xtop <- data.frame(X[, top10])
for(i in 1:nrow(X)){
cvY <- Y[-i]
cvlm[[i]] <- lm(cvY ~., data=Xtop[-i,])
msecvW[i] <- (predict(cvlm[[i]], newdata=Xtop[i,]) - Y[i])^2
}
mean(msecvW)
cvlm <- list()
msecvR <- NA
for(i in 1:nrow(X)){
cvtop10 <- which(rank(cor(cbind(Y[-i], X[-i,]))[-1,1]) %in% 1:10)
cvXtop10 <- data.frame(X[, cvtop10])
cvY <- Y[-i]
cvlm[[i]] <- lm(cvY ~., data=cvXtop10[-i,])
msecvR[i] <- (predict(cvlm[[i]], newdata=cvXtop10[i,]) - Y[i])^2
}
mean(msecvR)
cvlm <- list()
msecvR <- NA
for(i in 1:nrow(X)){
cvtop10 <- which(rank(cor(cbind(Y[-i], X[-i,]))[-1,1]) %in% 1:10)
cvXtop10 <- data.frame(X[, cvtop10])
cvY <- Y[-i]
cvlm[[i]] <- lm(cvY ~., data=cvXtop10[-i,])
msecvR[i] <- (predict(cvlm[[i]], newdata=cvXtop10[i,]) - Y[i])^2
}
mean(msecvR)
