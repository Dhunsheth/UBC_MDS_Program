df[2]
df[,2]
df[1,]
df[1,]*3
df[2][3]
x<-5
if (x>5){print("hello")} else if (x==5) {print("2")} else {print("3")}
1
if (x>5){print("hello")} else if (x==5) {print("2")} else {print("3")}
system.file(package='tidyverse')
system.file(package='ggplot2')
library(tidyverse,quietly = TRUE)
data
data()
data("BJsales")
x<-data("BJsales")
x
x$BJsales
str(x)
data(BJsales)
x<-data(BJsales)
x
BJsales
x<-BJsales
x
str(x)
str(BJsales.lead)
1-pt(0.33,8)
2*(1-pt(0.33,8))
pt(-1.5383,8)
pt(-1.5383,8)*2
pt(-0.367,8)*2
-1.109/3.026
-3.755/2.441
2*(pt(-3.755/2.441,8))
2*(pt(-1.109/3.026,8))
part_6_query <- "
select year, shippedQuantity
from part_3_sqlite
where ps_partkey = 217 and ps_suppkey = 18
"
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
knitr::opts_chunk$set(echo = TRUE)
library("DBI")
library("RMySQL")
library("RSQLite")
con <- dbConnect(RMySQL::MySQL(), user='dsheth', password='32376881',
dbname='tpch', host='cosc304.ok.ubc.ca')
part_2_query <- "
select ps_partkey, ps_suppkey, ps_availqty, year(l_shipdate) as year,
sum(l_quantity) as shippedQuantity
from partsupp join lineitem on l_partkey = ps_partkey and l_suppkey = ps_suppkey
group by ps_partkey, ps_suppkey, ps_availqty, year(l_shipdate)
order by ps_partkey, ps_suppkey, year(l_shipdate)
"
part_2_res <- dbGetQuery(con, part_2_query)
part_2_res[1:10,]
con_sqlite <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con_sqlite, "part_3_sqlite", part_2_res)
part_3_4_data <- dbGetQuery(con_sqlite,"SELECT * FROM part_3_sqlite")
part_3_4_data[1:10,]
part_5_query <- "
select *
from part_3_sqlite
where year = 2018 and ps_availqty < shippedQuantity
limit 5
"
part_5_data <- dbGetQuery(con_sqlite, part_5_query)
print('Products with insufficient inventory based on 2018 sales:')
part_5_data
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
part_6_data
part_6_reg <- lm(shippedQuantity ~ year, data=part_6_data[2:6,])
reg_est_2019 <- part_6_reg$coefficients[2] * 2019 + part_6_reg$coefficients[1]
reg_est_2019
part_6_data[2:6,]
part_6_query <- "
select year, shippedQuantity
from part_3_sqlite
where ps_partkey = 217 and ps_suppkey = 18
"
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
part_6_reg <- lm(shippedQuantity ~ year, data=part_6_data)
summary(part_6_reg)
reg_est_2019 <- part_6_reg$coefficients[2] * 2019 + part_6_reg$coefficients[1]
reg_est_2019
part_6_data
x <- rnorm(100)
x2 <- x^2
y <- 4+x+x2
plot(y~x)
reg <- lm(y~x+x2)
xx <- seq(-2,2, length.out=250)
lines(xx, predict(reg))
xx <- seq(-2,2, length.out=100)
lines(xx, predict(reg))
lines(xx, predict(lm(y~x+x2)))
xx <- seq(-2,2)
lines(xx, predict(lm(y~x+x2)))
lines(xx, predict(lm(y˜x+x2,
lines(xx, predict(lm(y~x+x2,
data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2,data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2)), data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2), data.frame(x=xx)), col=’red’)
lines(xx, predict(lm(y~x+x2), data.frame(x=xx)), col="red")
xx <- seq(-2,2, length.out=100)
lines(xx, predict(lm(y~x+x2), data.frame(x=xx)), col="red")
lm(log(y)~x+I(x^2))
glm(y~x+I(x^2),family=poisson)
plot(y~x)
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(y~x+I(xˆ2)), data.frame(x=xx)), col="red")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(y~x+I(x^2)), data.frame(x=xx)), col="red")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(log(y)~x+I(x^2)), data.frame(x=xx)), col="green")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(log(y)~x+I(x^2)), data.frame(x=xx)), col="green")
plot(y~x)
xx <- seq(-2,2, length.out=250)
lines(xx, predict(lm(log(y)~x+I(x^2)), data.frame(x=xx)), col="green")
reg_log <- lm(log(y)~x+I(x^2))
xx <- seq(-2,2, length.out=250)
lines(xx, predict(reg_log), data.frame(x=xx)), col="green")
xx <- seq(-2,2, length.out=250)
lines(xx, predict(reg_log), data.frame(x=xx)), col="red")
x <- rnorm(100)
x2 <- x^2
exp(y) <- 2+x+x2
y <- exp(2+x+x2)
plot(y~x)
lm(log(y)~x+I(x^2))
glm(y~x+I(x^2), family=poisson)
cig.glm <- glm(x~d, family = poisson)
x <- cigbutts$count; d <- cigbutts$distance
logit(y)
help(logit)
??log
help(log)
help(logit)
x <- rnorm(100)
y<- 2+x+x^2+runif(100)
plot(y~x)
lm(log(y)~x+I(x^2))
glm(y~x+I(x^2),family=poisson)
help(gaussian)
glm(y~x+I(x^2),family=gaussian)
plot(gaussian())
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
glm(n~x, family = poisson)
lm(log(n)~x)
x <- rnorm(100)
lamda <- exp(2+x+x^2)
n <- rpois(100, lamda)
glm(n~x+I(x^2), family = poisson)
lm(log(n)~x+I(x^2))
glm(n~x+I(x^2), family = gaussian)
plot(n~x)
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
plot(n~x)
glm(n~x, family = poisson)
lm(log(n)~x)
x <- rnorm(100)
lamda <- exp(1-x-x^2)
n <- rpois(100, lamda)
plot(n~x)
glm(n~x+I(x^2), family = poisson)
lm(log(n)~x+I(x^2))
x <- rnorm(100)
lamda <- exp(1+x+x^2)
n <- rpois(100, lamda)
plot(n~x)
glm(n~x+I(x^2),family=gaussian)
help("gaussian")
x <- rnorm(100)
y<-2+x+x^2+runif(100)
plot(y~x)
lm(y~x+I(x^2))
glm(y~x+I(x^2, family=gaussian)
)
glm(y~x+I(x^2), family=gaussian)
runif(100)
rnorm(100)
rnorm(100,0,1)
y<-2+x+x^2+rnorm(100)
plot(y~x)
plot(y~x)
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_3/data_571/submissions/assignment_1")
knitr::opts_chunk$set(echo = TRUE)
library(bootstrap)
set.seed(32531)
X <- matrix(rnorm(100000), nrow=50, ncol=2000)
Y <- rnorm(50)
top10 <- which(rank(cor(cbind(Y, X))[-1,1]) %in% 1:10)
cvlm <- list()
msecvW <- NA
Xtop <- data.frame(X[, top10])
for(i in 1:nrow(X)){
cvY <- Y[-i]
cvlm[[i]] <- lm(cvY ~., data=Xtop[-i,])
msecvW[i] <- (predict(cvlm[[i]], newdata=Xtop[i,]) - Y[i])^2
}
mean(msecvW)
var(y)
var(Y)
n
n <- sum(n_h)
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
options(digits = 3)
N_h <- c(44644808,  52546066, 94590118, 59326414)
N <- sum(N_h)
W_h <- N_h/N
trump <- c(10108658, 15559072,  25867401,  11444729)
clinton <- c( 13652408, 14184562,  21967373, 16040609)
n_h <- trump + clinton
n <- sum(n_h)
w_h <- n_h/n
pi_h <- trump/n_h
f_h <- n_h/N_h
n_h
n
sum(W_h *pi_h)*100
sum(w_h *pi_h)*100
sum((n_h/n)* pi_h)*100
sum((1-n/N)*(W_h)^2*pi_h*(1-pi_h)/(n_h-1))
sum(W_h^2 * (1-f_h)/n_h * pi_h * (1 - pi_h))
n_h-1
n_h
pi_hat
pi_strata_ci <- pi_strata_hat + c(-1,+1) * Zval * SE_var_strata
pi_strata_hat <- sum(W_h *pi_h)
pi_strata_ci <- pi_strata_hat + c(-1,+1) * Zval * SE_var_strata
alpha = 0.05
Zval  = qnorm(1-alpha/2)
pi_strata_ci <- pi_strata_hat + c(-1,+1) * Zval * SE_var_strata
(1-n/N)*pi_hat*(1-pi_hat)/(n-1)
pi_hat <- sum(n_h/n*pi_h)
(1-n/N)*pi_hat*(1-pi_hat)/(n-1)
x <- c(12, 14, 14, 15, 18, 21, 25, 29, 32, 35)
SEcalculator(x, myMedian)
knitr::opts_chunk$set(echo = TRUE)
library(MPV) # loads MPV
library(boot)
SEcalculator <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
sd(xResample)
}
EstAndSE <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
list(estimate = FUN(x), SE = sd(xResample))
}
SEcalculator <- function(x, FUN, N = 1000) {
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- FUN(sample(x, size = length(x), replace=TRUE))
}
sd(xResample)
}
changes <- diff(LakeHuron)
mean_standard_error_function <- SEcalculator(changes, mean)
print(mean_standard_error_function)
mean_usual_standard_error <- sd(changes)/sqrt(length(changes))
print(mean_usual_standard_error)
var_standard_error_function <- SEcalculator(changes, var)
print(var_standard_error_function)
q90 <- function(x, N=1000){
xResample <- numeric(N)
for (i in 1:N) {
xResample[i] <- quantile(sample(x, size = length(x), replace=TRUE), 0.9)
}
list(estimate = quantile(x, 0.9), SE = sd(xResample))
}
quant_90 <- q90(changes)
print(quant_90)
p <- c(0.2, 0.7, 0.9)
x1 <- 1
x2 <- 0
pdf_vals <- ((p^x1)*((1-p)^(1-x1)))*((p^x2)*((1-p)^(1-x2)))
print(pdf_vals)
# help(p13.2)
p13.glm <- glm(formula = y ~ x, family = binomial, data = p13.2)
print(p13.glm)
print(is.list(p13.glm))
set.seed(123)
x <- c(12, 14, 14, 15, 18, 21, 25, 29, 32, 35)
#define function to return median
myMedian <- function(x,i){median(x[i])}
result <- boot(x, myMedian, 200)
print(result)
SEcalculator(x, myMedian)
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_3/data_581/submissions/lab_2")
knitr::opts_chunk$set(echo = TRUE)
library(MPV)
table.b1
lm_reg <- lm(y~., data=table.b1)
lm_reg <- lm(y~., data=table.b1)
print(summary(lm_reg))
residuals <- residuals(lm_reg)
# Obtain fitted values
fitted_values <- fitted(lm_reg)
# Plot residuals versus fitted values
plot(fitted_values, residuals, main = "Residuals vs Fitted Values",
xlab = "Fitted Values", ylab = "Residuals")
# Add a horizontal line at y = 0 (the expected value for residuals)
abline(h = 0, col = "red", lty = 2)
# Identify potential outliers using standardized residuals
std_residuals <- rstandard(model)
residuals <- residuals(lm_reg)
# Obtain fitted values
fitted_values <- fitted(lm_reg)
# Plot residuals versus fitted values
plot(fitted_values, residuals, main = "Residuals vs Fitted Values",
xlab = "Fitted Values", ylab = "Residuals")
# Add a horizontal line at y = 0 (the expected value for residuals)
abline(h = 0, col = "red", lty = 2)
# Identify potential outliers using standardized residuals
std_residuals <- rstandard(lm_reg)
potential_outliers <- abs(std_residuals) > 2  # You can adjust the threshold as needed
# Highlight potential outliers
points(fitted_values[potential_outliers], residuals[potential_outliers], col = "blue", pch = 16)
residuals <- residuals(lm_reg)
fitted_values <- fitted(lm_reg)
plot(fitted_values, residuals, main = "Residuals vs Fitted Values",
xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red", lty = 2)
library(MASS)
step_model <- stepAIC(lm_reg, direction = "both", trace = FALSE)
summary(step_model)
library(MASS)
step_model <- stepAIC(lm_reg, direction = "both", trace = FALSE, test = "qr")
library(MASS)
step_model <- stepAIC(lm_reg, direction = "both", trace = FALSE)
print(summary(step_model))
Ub <- Ubetahat(lm_reg, table.b1$y)
library(MASS)
Ubetahat <- function(lm.object, y) {
Ub <- t(qr.Q(lm.object$qr))%*%y
Ub
}
Qresid <- function(lm.object, y) {
p <- summary(lm.object)$df[1]
(t(qr.Q(lm.object$qr, complete = TRUE)) %*% y)[-(1:p)]
}
step_model <- stepAIC(lm_reg, direction = "both", trace = FALSE)
print(summary(step_model))
Ub <- Ubetahat(lm_reg, table.b1$y)
Qres <- Qresid(lm_reg, table.b1$y)
#par(mar=c(4, 4, .1, .1))
qqplot(Ub, Qres, pch = 16, ylab = "residuals", xlab = "effects")
points(Qres, Qres, col="grey")
cutoff <- quantile(abs(Qres), .99)
indices <- (abs(Ub) > cutoff)
UbKeep <- Ub*indices
betahat <- as.vector(backsolve(qr.R(lm_reg$qr), UbKeep))
names(betahat) <- names(coef(lm_reg))
betahat
library(MASS)
Ubetahat <- function(lm.object, y) {
Ub <- t(qr.Q(lm.object$qr))%*%y
Ub
}
Qresid <- function(lm.object, y) {
p <- summary(lm.object)$df[1]
(t(qr.Q(lm.object$qr, complete = TRUE)) %*% y)[-(1:p)]
}
step_model <- stepAIC(lm_reg, direction = "both", trace = FALSE)
print(summary(step_model))
Ub <- Ubetahat(lm_reg, table.b1$y)
Qres <- Qresid(lm_reg, table.b1$y)
qqplot(Ub, Qres, pch = 16, ylab = "residuals", xlab = "effects")
points(Qres, Qres, col="grey")
cutoff <- quantile(abs(Qres), .99)
indices <- (abs(Ub) > cutoff)
UbKeep <- Ub*indices
betahat <- as.vector(backsolve(qr.R(lm_reg$qr), UbKeep))
names(betahat) <- names(coef(lm_reg))
print(betahat)
library(MASS)
Ubetahat <- function(lm.object, y) {
Ub <- t(qr.Q(lm.object$qr))%*%y
Ub
}
Qresid <- function(lm.object, y) {
p <- summary(lm.object)$df[1]
(t(qr.Q(lm.object$qr, complete = TRUE)) %*% y)[-(1:p)]
}
step_model <- stepAIC(lm_reg, direction = "both", trace = FALSE)
print(summary(step_model))
Ub <- Ubetahat(lm_reg, table.b1$y)
Qres <- Qresid(lm_reg, table.b1$y)
cutoff <- quantile(abs(Qres), .99)
indices <- (abs(Ub) > cutoff)
UbKeep <- Ub*indices
betahat <- as.vector(backsolve(qr.R(lm_reg$qr), UbKeep))
names(betahat) <- names(coef(lm_reg))
print(betahat)
p13.2
glm_reg <- glm(y~x, data=p13.2, family=binomial())
glm_reg <- glm(y~x, data=p13.2, family=binomial())
summary(glm_reg)
glm$coefficients
glm_reg$coefficients
glm_reg <- glm(y~x, data=p13.2, family=binomial())
summary(glm_reg)
\[log(\frac{p}{1-p}) =\] `r glm_reg$coefficients[1] + glm_reg$coefficients[2]*x`
glm_reg <- glm(y~x, data=p13.2, family=binomial())
summary(glm_reg)
\[log(\frac{p}{1-p}) =\] `r glm_reg$coefficients[1] + glm_reg$coefficients[2]*x`
glm_reg <- glm(y~x, data=p13.2, family=binomial())
summary(glm_reg)
\log(\frac{p}{1-p}) =\ `r glm_reg$coefficients[1] + glm_reg$coefficients[2]*x`
glm_reg <- glm(y~x, data=p13.2, family=binomial())
summary(glm_reg)
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
glm_reg <- glm(y~x, data=p13.2, family=binomial())
summary(glm_reg)
plot(y~x, data=p13.2)
p13.2$y
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
llikelihoodValues <- log(dbinom(p13.2$y, p/(1-p) = exp(beta_0 + beta_1*p13.2$x)))
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
llikelihoodValues <- log(dbinom(y, p/(1-p) = exp(beta_0 + beta_1*x)))
n <- 50
x <- runif(n, min = 0, max = 10)
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- rbinom(n, p)
n <- 50
x <- runif(n, min = 0, max = 10)
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- rbinom(n, prob=p)
help(rbinom)
n <- 50
x <- runif(n, min = 0, max = 10)
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- rbinom(n, 1, prob=p)
plot(y~x)
y.glm <- glm(y ˜ x, family = binomial())
n <- 50
x <- runif(n, min = 0, max = 10)
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- rbinom(n, n, prob=p)
plot(y~x)
y.glm <- glm(y ˜ x, family = binomial())
x <- p13.2$x
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- p13.2$y
plot(y~x)
y.glm <- glm(y ˜ x, family = binomial())
x <- p13.2$x
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- p13.2$y
y.glm <- glm(y˜x, family = binomial())
x <- p13.2$x
beta_0 <- glm_reg$coefficients[1]
beta_1 <- glm_reg$coefficients[2]
theta <- beta_0 - beta_1*x
p <- exp(theta)/(1+exp(theta))
y <- p13.2$y
y.glm <- glm(y~x, family = binomial())
llikelihoodValues <- log(dbinom(y, p =  exp(theta)/(1+exp(theta))))
summary(glm_reg)$deviance
p13.2
p13.5
y.logit2 <- glm(y~x, data = p13.2, family = binomial(link = "logit"))
anova(y.logit2, glm_reg)
epil
epil_reg <- glm(y~., data=epil, family=poisson)
epil_reg <- glm(y~., data=epil, family=poisson)
print(summary(epil_reg))
print(summary(epil_reg))
epil_reg <- glm(y~age+trt, data=epil, family=poisson)
print(summary(epil_reg))
epil_reg <- glm(y~age+trt, data=epil, family=poisson)
plot(y~age+trt, data=epil)
print(summary(epil_reg))
confint(epil_reg)
epil
predict(epil_reg, newdata = c(20,"progabide"), type = "response")
predict(epil_reg, newdata = data.frame(age = 20, trt = "progabide"), type = "response")
