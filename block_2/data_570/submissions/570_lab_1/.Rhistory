x2
x2 %% 131072
42816/131072
dbinom(3,3,0.75)
3*0.75
1-(1-0.5)
2/3 - 1/2
1/6
30/5
20/5
20/(5*8)
0.5*8
dpois(1/8,4)
dexp(1,0.5)
dexp(1/8,4)
4*(1/8)
funct <- function(n, a, b, m, x0){
# Initialize the sequence with x0
x <- numeric(n+1)
x[1] <- x0   # Replace with your desired initial value for 'x0'
# Calculate the sequence using the recurrence relation
for (k in 2:(1+n)) {
# print(k)
# print(x[k])
# print(x[k-1])
x[k] <- ( (a + b * x[k-1]) %% (m) )
}
u <- x/(m)
print(x)
print(u)
return (u)
}
ans <- funct(2,1, 361, 131072, 118)
dbinom(3,3,0.75)
20*1/5
knitr::opts_chunk$set(echo = TRUE)
runifAvg <- function(N, n) {
X <- matrix(runif(N*n),N,n)
rowMeans(X)
}
hist(runifAvg(10000,2))
runifAvg <- function(N, n) {
X <- matrix(runif(N*n),N,n)
rowMeans(X)
}
hist(runifAvg(10000,100))
hist(runifAvg(10000,3))
runifAvg <- function(N, n) {
X <- matrix(rbinom(N*n, 1, 0.25),N,n)
rowMeans(X)
}
hist(runifAvg(10000,3))
runifAvg <- function(N, n) {
X <- matrix(rbinom(N*n, 1, 0.25),N,n)
rowMeans(X)
}
hist(runifAvg(10000,100))
hist(runifAvg(10000,100))
hist(runifAvg(10000,3))
runifAvg <- function(N, n) {
X <- matrix(runif(N*n),N,n)
rowMeans(X)
}
hist(runifAvg(10000,3))
hist(runifAvg(10000,6))
hist(runifAvg(10000,10))
hist(runifAvg(10000,15))
hist(runifAvg(10000,30))
hist(runifAvg(10000,100))
runifAvg <- function(N, n) {
X <- matrix(rbinom(N*n, 1, 0.25),N,n)
rowMeans(X)
}
hist(runifAvg(10000,3))
hist(runifAvg(10000,6))
hist(runifAvg(10000,10))
hist(runifAvg(10000,15))
hist(runifAvg(10000,30))
hist(runifAvg(10000,100))
rate <- 1.5
time <- 100000
N <- rpois(1, lambda = rate*time)
U <- runif(N, max = time)
PoissonPoints = sort(U)
PoissonPoints
x <- runif(100000, min=0, max=1)
m <- mean(x)
m
k <- mean((x-mean(x)^3))
k
x <- runif(100000, min=0, max=1)
k <- mean((x-mean(x)^3))
k <- mean((x-mean(x)**3))
k
x <- runif(100000, min=0, max=1)
k <- mean((x-mean(x)**3))
x <- runif(100000, min=0, max=1)
k <- mean((x-mean(x)**3))
k
k <- mean( (x-mean(x))**3 )
k
mean( (x-mean(x))**3 )
x <- runif(100000, min=0, max=1)
k <- mean( (x-mean(x))**3 )
k
binsim<- rbinom(10000,20,0.3)
count(binsim > 5)
binsim > 5
sum(binsim > 5)
prob_less_than_or_equal_to_5 <- sum(binsim <= 5)/10000
prob_less_than_or_equal_to_5
pbinom(5,20,0.3)
prob_equal_5 <- sum(binsim = 5)/10000
prob_equal_5
dbinom(5,20,0.3)
prob_equal_5 <- sum(binsim == 5)/10000
prob_equal_5
p1<- rpois(10000,5)
p2<- rpois(10000,25)
p3<- rpois(10000,125)
p4<- rpois(10000,625)
p1_mean<- mean(p1)
p2_mean<- mean(p2)
p3_mean<- mean(p3)
p4_mean<- mean(p4)
print(p1_mean)
print(p2_mean)
print(p3_mean)
print(p4_mean)
p1_log_mean<- mean(log(1+p1))
p2_log_mean<- mean(log(1+p2))
p3_log_mean<- mean(log(1+p3))
p4_log_mean<- mean(log(1+p4))
print(p1_log_mean)
print(p2_log_mean)
print(p3_log_mean)
print(p4_log_mean)
p1_root_mean<- mean(sqrt(p1))
p2_root_mean<- mean(sqrt(p2))
p3_root_mean<- mean(sqrt(p3))
p4_root_mean<- mean(sqrt(p4))
print(p1_root_mean)
print(p2_root_mean)
print(p3_root_mean)
print(p4_root_mean)
sqrt(p1)
x<-2
y<-seq(5,30,5)
x+y
x<-'a'
y<-8
x+y
x<-"a"
y+x
x+y
str(b)
str(a)
str(x)
as.character(y)+x
y
as.character(y)
str(as.character(y))
as.character(y) + x
x
x+as.character(y)
as.integer(x)
paste(x,as.character(y))
x <- c(6:10)
x
x[c(1,3)]
x[-1]
length(x)
x[length(x)]
x[-3]
x[1:3]
x[3:1]
names(x) <- c("first", "second", "third", "fourth", "fifth")
x['fourth']
x[x>8]
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE)
names(my_info)
my_info
typeof(my_info)
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info[1]
my_info[4]
my_info[4][1]
my_info[4,1]
my_info[4][1]
my_info[4][1][1]
my_info[[4]]
my_info[[4]][1]
my_info[[4,1]]
my_info[[4],1]
my_info[[4]][1]
df<- data.frame( name = c("I", "She", "They"),
hight = c(5.4, 6, 5.8),
right_handed = c(TRUE, FALSE, FALSE))
df
str(df)
df[1,2]
df.columns
df[,2]
df[1,]
df$right_handed
df[,3]
df[,3][1]
df
df[,2]*2
df[,2][1:2]
means <- c()
for (i in 1:length(means)) {
print(i)
}
means
length(means)
if(x > 0) print("Non-negative number") else print("Negative number")
x<--5
if(x > 0) print("Non-negative number") else print("Negative number")
install.packages("tidyverse")
x <- 1:5
x
length(x)
unique(x)
help("unique")
max(x)
sort(x, decreasing = TRUE)
x!<-1:5
x_!<-1:5
x
y<-3:8
y
y<-3:10
x & y
y&x
y<-3:7
y
x&y
x
y
y&x
x && y
x&&y
typeof(1L)
b<-1L
b
vect_1 <- c(-2, 2:10, 20)
vect_1`
vect_1
vect_2 <- seq(5,10)
vect_2
typeof(vect_2)
typeof(x)
x
typeof(vect_1)
vect_1
typeof(c(1:10))
weekdays <- c("Mon", "Tues", "Wed", "Thur", "Fri")
mixed_vec <- c(vect_2, weekdays)
mixed_vec
str(mixed_vec)
is.integer(vect_1)
as.integer(vect_1)
as.logical(vect_1)
x<-2
y<-seq(5,30,5)
x+y
x <- c(6:10)
x[c(1,3)]
x
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info[2]
df<- data.frame( name = c("I", "She", "They"),
hight = c(5.4, 6, 5.8),
right_handed = c(TRUE, FALSE, FALSE))
df
df[, 1]
x<-2
y<-seq(5,30,5)
x+y
a<-"a"
x<-8
x+a
b<-"8"
a+b
a
b
a+b
b+a
a+as.character(x)
as.character(x) + x
as.character(x) + a
a
b
a&b
x <- c(6:10)
x
names(x) <- c("first", "second", "third", "fourth", "fifth")
x['fourth']
x[['fourth']
]
x[['fourth']]
my_info <- list("Gema", 5.4, TRUE)
my_info
names(my_info)
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE)
names(my_info)
my_info[2]
my_info[2]+2
my_info[[2]]+2
my_info[4]
my_info[3]
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info
my_info[4]
my_info[4][2]
my_info[[4]][2]
my_info[4][2]
my_info[4]
my_info$courses
my_info["courses"]
df<- data.frame( name = c("I", "She", "They"),
hight = c(5.4, 6, 5.8),
right_handed = c(TRUE, FALSE, FALSE))
df
df[1]
df[1][0]
df[1][1]
df[1][2]
df[2]
df&height
df&hight
df
df&right_handed
str(df)
df
df[3][2]
df[3]
df[3,2]
df[3][2]
df$right_handed
df$hight
df$hight[0]
df$hight[1]
df[1]
df[1,1]
df[2]
df[,2]
df[1,]
df[1,]*3
df[2][3]
x<-5
if (x>5){print("hello")} else if (x==5) {print("2")} else {print("3")}
1
if (x>5){print("hello")} else if (x==5) {print("2")} else {print("3")}
system.file(package='tidyverse')
system.file(package='ggplot2')
library(tidyverse,quietly = TRUE)
data
data()
data("BJsales")
x<-data("BJsales")
x
x$BJsales
str(x)
data(BJsales)
x<-data(BJsales)
x
BJsales
x<-BJsales
x
str(x)
str(BJsales.lead)
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_2/data_570/submissions/570_lab_1")
knitr::opts_chunk$set(echo = TRUE)
x <- matrix((1,2,3),(4,5,6))
x <- matrix((1 2 3),(4 5 6))
x <- rbind(c(0, 2, 0),(-2 -1 0))
x <- rbind(c(0, 2, 0),(-2, -1, 0))
x <- rbind(c(0, 2, 0),c(-2, -1, 0))
x
x <- rbind(c(0, 2, 0),c(-2, -1, 0), c(-1, 0, 1), c(0, 1, 3), c(1, 1, 1), c(0, 3, 0))
x
point <- matrix(0, nrow=6, ncol=3)
point
dim(x)
dim(x - t(point))
dim(x-point)
x-point
sum(x-point)
rowsums(x-point)
rowSums(x-point)
sqrt(rowSums(x-point)^2)
sqrt(rowSums(x-point)**2)
sqrt((rowSums(x-point))**2)
sqrt(rowSums((x-point)**2))
(x-point)
(x-point)**2
rowSums((x-point)**2)
sqrt(rowSums((x-point)**2))
dist <- t(sqrt(rowSums((x-point)**2)))
dist
dist <- sqrt(rowSums((x-point)**2))
dist
test <- rbind(c(0,0,0),c(0, 2, 0),c(-2, -1, 0), c(-1, 0, 1), c(0, 1, 3), c(1, 1, 1), c(0, 3, 0))
dist(test, method=”euclidean”)
dist(test, method="euclidean")
min(dist)
dist
dist <- matrix(sqrt(rowSums((x-point)**2)), ncol=1)
dist
index(min(dist))
print(smallest_eu_distance)
print(smallest_eu_distance)
print(smallest_eu_distance)
print(smallest_eu_distance)
smallest_eu_distance
smallest_eu_distance <- min(dist)
print(dist)
print(smallest_eu_distance)
x <- rbind(c(0, 2, 0),c(-2, -1, 0), c(-1, 0, 1), c(0, 1, 3), c(1, 1, 1), c(0, 3, 0))
point <- matrix(0, nrow=6, ncol=3)
dist <- matrix(sqrt(rowSums((x-point)**2)), ncol=1)
print(dist)
smallest_eu_distance <- min(dist)
print(smallest_eu_distance)
library(localpoly12)
library(localpoly2)
# # Green line "connect the dots" poly
localpoly2 <- loess(y~x, span=0.1)
set.seed(23418)
x <- sort(runif(30,0,3))
y <- exp(x) + rnorm(length(x))
plot(x, y)
plot(x, y)
linmod <- lm(y ~ x)
abline(linmod, col="red", lwd=3)
plot(x, y)
localpoly1 <- loess(y~x, span=0.75)
lines(x, predict(localpoly1), col="blue", lwd=3)
plot(x, y)
# # Green line "connect the dots" poly
localpoly2 <- loess(y~x, span=0.1)
# ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,
# : span too small. fewer data values than degrees of freedom.
# ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,
# : pseudoinverse used at 0.11179
# ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,
# : neighborhood radius 0.16526
# ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,
# : reciprocal condition number 0
# ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,
# : There are other near singularities as well. 0.00079695
lines(x, predict(localpoly2), col="green", lwd=3)
# Training MSE
trmse_red <- mean((y - predict(linmod))^2)
trmse_blue <- mean((y - predict(localpoly1))^2)
trmse_green <- mean((y - predict(localpoly2))^2)
round(trmse_red, 2)
round(trmse_blue, 2)
round(trmse_green, 2)
# Generate 10 new points and plot
set.seed(41368)
xnew <- sort(runif(10,0,3))
ynew <- exp(xnew) + rnorm(length(xnew))
plot(x, y)
abline(linmod, col="red", lwd=3)
lines(x, predict(localpoly1), col="blue", lwd=3)
lines(x, predict(localpoly2), col="green", lwd=3)
points(xnew, ynew, pch=17, col="gray", cex=1.5)
# Test MSE
temse_red <- mean( (ynew - predict(linmod, data.frame(x = xnew)))^2 )
temse_blue <- mean( (ynew - predict(localpoly1, data.frame(x = xnew)))^2 )
temse_green <- mean((ynew - predict(localpoly2, data.frame(x = xnew)))^2 )
temse_red
temse_blue
temse_green
print(dist)
print(dist)
eu_distance <- matrix(sqrt(rowSums((x-origin)**2)), ncol=1)
print(eu_distance)
```{r question_7_a}
x <- rbind(c(0, 2, 0),c(-2, -1, 0), c(-1, 0, 1), c(0, 1, 3), c(1, 1, 1), c(0, 3, 0))
origin <- matrix(0, nrow=6, ncol=3)
eu_distance <- matrix(sqrt(rowSums((x-origin)**2)), ncol=1)
print(eu_distance)
print(eu_distance)
smallest_eu_distance <- min(eu_distance)
print(smallest_eu_distance)
### Part B
```{r question_7_b}
### Part C
``` {r question_7_c}
print(eu_distance)
