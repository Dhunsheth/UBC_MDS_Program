p1_mean<- mean(p1)
p2_mean<- mean(p2)
p3_mean<- mean(p3)
p4_mean<- mean(p4)
print(p1_mean)
print(p2_mean)
print(p3_mean)
print(p4_mean)
p1_log_mean<- mean(log(1+p1))
p2_log_mean<- mean(log(1+p2))
p3_log_mean<- mean(log(1+p3))
p4_log_mean<- mean(log(1+p4))
print(p1_log_mean)
print(p2_log_mean)
print(p3_log_mean)
print(p4_log_mean)
p1_root_mean<- mean(sqrt(p1))
p2_root_mean<- mean(sqrt(p2))
p3_root_mean<- mean(sqrt(p3))
p4_root_mean<- mean(sqrt(p4))
print(p1_root_mean)
print(p2_root_mean)
print(p3_root_mean)
print(p4_root_mean)
sqrt(p1)
x<-2
y<-seq(5,30,5)
x+y
x<-'a'
y<-8
x+y
x<-"a"
y+x
x+y
str(b)
str(a)
str(x)
as.character(y)+x
y
as.character(y)
str(as.character(y))
as.character(y) + x
x
x+as.character(y)
as.integer(x)
paste(x,as.character(y))
x <- c(6:10)
x
x[c(1,3)]
x[-1]
length(x)
x[length(x)]
x[-3]
x[1:3]
x[3:1]
names(x) <- c("first", "second", "third", "fourth", "fifth")
x['fourth']
x[x>8]
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE)
names(my_info)
my_info
typeof(my_info)
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info[1]
my_info[4]
my_info[4][1]
my_info[4,1]
my_info[4][1]
my_info[4][1][1]
my_info[[4]]
my_info[[4]][1]
my_info[[4,1]]
my_info[[4],1]
my_info[[4]][1]
df<- data.frame( name = c("I", "She", "They"),
hight = c(5.4, 6, 5.8),
right_handed = c(TRUE, FALSE, FALSE))
df
str(df)
df[1,2]
df.columns
df[,2]
df[1,]
df$right_handed
df[,3]
df[,3][1]
df
df[,2]*2
df[,2][1:2]
means <- c()
for (i in 1:length(means)) {
print(i)
}
means
length(means)
if(x > 0) print("Non-negative number") else print("Negative number")
x<--5
if(x > 0) print("Non-negative number") else print("Negative number")
install.packages("tidyverse")
x <- 1:5
x
length(x)
unique(x)
help("unique")
max(x)
sort(x, decreasing = TRUE)
x!<-1:5
x_!<-1:5
x
y<-3:8
y
y<-3:10
x & y
y&x
y<-3:7
y
x&y
x
y
y&x
x && y
x&&y
typeof(1L)
b<-1L
b
vect_1 <- c(-2, 2:10, 20)
vect_1`
vect_1
vect_2 <- seq(5,10)
vect_2
typeof(vect_2)
typeof(x)
x
typeof(vect_1)
vect_1
typeof(c(1:10))
weekdays <- c("Mon", "Tues", "Wed", "Thur", "Fri")
mixed_vec <- c(vect_2, weekdays)
mixed_vec
str(mixed_vec)
is.integer(vect_1)
as.integer(vect_1)
as.logical(vect_1)
x<-2
y<-seq(5,30,5)
x+y
x <- c(6:10)
x[c(1,3)]
x
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info[2]
df<- data.frame( name = c("I", "She", "They"),
hight = c(5.4, 6, 5.8),
right_handed = c(TRUE, FALSE, FALSE))
df
df[, 1]
x<-2
y<-seq(5,30,5)
x+y
a<-"a"
x<-8
x+a
b<-"8"
a+b
a
b
a+b
b+a
a+as.character(x)
as.character(x) + x
as.character(x) + a
a
b
a&b
x <- c(6:10)
x
names(x) <- c("first", "second", "third", "fourth", "fifth")
x['fourth']
x[['fourth']
]
x[['fourth']]
my_info <- list("Gema", 5.4, TRUE)
my_info
names(my_info)
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE)
names(my_info)
my_info[2]
my_info[2]+2
my_info[[2]]+2
my_info[4]
my_info[3]
my_info <- list(name = "Gema",
height = 5.4,
right_handed = TRUE,
courses = c("DATA531","DATA532"))
my_info
my_info[4]
my_info[4][2]
my_info[[4]][2]
my_info[4][2]
my_info[4]
my_info$courses
my_info["courses"]
df<- data.frame( name = c("I", "She", "They"),
hight = c(5.4, 6, 5.8),
right_handed = c(TRUE, FALSE, FALSE))
df
df[1]
df[1][0]
df[1][1]
df[1][2]
df[2]
df&height
df&hight
df
df&right_handed
str(df)
df
df[3][2]
df[3]
df[3,2]
df[3][2]
df$right_handed
df$hight
df$hight[0]
df$hight[1]
df[1]
df[1,1]
df[2]
df[,2]
df[1,]
df[1,]*3
df[2][3]
x<-5
if (x>5){print("hello")} else if (x==5) {print("2")} else {print("3")}
1
if (x>5){print("hello")} else if (x==5) {print("2")} else {print("3")}
system.file(package='tidyverse')
system.file(package='ggplot2')
library(tidyverse,quietly = TRUE)
data
data()
data("BJsales")
x<-data("BJsales")
x
x$BJsales
str(x)
data(BJsales)
x<-data(BJsales)
x
BJsales
x<-BJsales
x
str(x)
str(BJsales.lead)
1-pt(0.33,8)
2*(1-pt(0.33,8))
pt(-1.5383,8)
pt(-1.5383,8)*2
pt(-0.367,8)*2
-1.109/3.026
-3.755/2.441
2*(pt(-3.755/2.441,8))
2*(pt(-1.109/3.026,8))
part_6_query <- "
select year, shippedQuantity
from part_3_sqlite
where ps_partkey = 217 and ps_suppkey = 18
"
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
knitr::opts_chunk$set(echo = TRUE)
library("DBI")
library("RMySQL")
library("RSQLite")
con <- dbConnect(RMySQL::MySQL(), user='dsheth', password='32376881',
dbname='tpch', host='cosc304.ok.ubc.ca')
part_2_query <- "
select ps_partkey, ps_suppkey, ps_availqty, year(l_shipdate) as year,
sum(l_quantity) as shippedQuantity
from partsupp join lineitem on l_partkey = ps_partkey and l_suppkey = ps_suppkey
group by ps_partkey, ps_suppkey, ps_availqty, year(l_shipdate)
order by ps_partkey, ps_suppkey, year(l_shipdate)
"
part_2_res <- dbGetQuery(con, part_2_query)
part_2_res[1:10,]
con_sqlite <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con_sqlite, "part_3_sqlite", part_2_res)
part_3_4_data <- dbGetQuery(con_sqlite,"SELECT * FROM part_3_sqlite")
part_3_4_data[1:10,]
part_5_query <- "
select *
from part_3_sqlite
where year = 2018 and ps_availqty < shippedQuantity
limit 5
"
part_5_data <- dbGetQuery(con_sqlite, part_5_query)
print('Products with insufficient inventory based on 2018 sales:')
part_5_data
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
part_6_data
part_6_reg <- lm(shippedQuantity ~ year, data=part_6_data[2:6,])
reg_est_2019 <- part_6_reg$coefficients[2] * 2019 + part_6_reg$coefficients[1]
reg_est_2019
part_6_data[2:6,]
part_6_query <- "
select year, shippedQuantity
from part_3_sqlite
where ps_partkey = 217 and ps_suppkey = 18
"
part_6_data <- dbGetQuery(con_sqlite, part_6_query)
part_6_reg <- lm(shippedQuantity ~ year, data=part_6_data)
summary(part_6_reg)
reg_est_2019 <- part_6_reg$coefficients[2] * 2019 + part_6_reg$coefficients[1]
reg_est_2019
part_6_data
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_2/data_570/submissions/570_lab_3")
install.packages('ISLR', repos='http://cran.us.r-project.org')
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
attach(Auto)
head(Auto)
attach(Auto)
head(Auto)
fit1 <- lm(mpg~horsepower)
summary(fit1)
install.packages('DAAG', repos='http://cran.us.r-project.org')
roller$weight
library(DAAG)
x=roller$weight
x
DAAG
roller
library(DAAG)
x=roller$weight
y=roller$depression
plot(depression~weight, data=roller)
fit <- lm(depression~weight)
library(DAAG)
x=roller$weight
y=roller$depression
plot(depression~weight, data=roller)
fit <- lm(depression~weight)
library(DAAG)
x=roller$weight
y=roller$depression
plot(depression~weight, data=roller)
fit <- lm(depression~weight, data=roller)
abline(fit, col="red")
plot(fit)
library(DAAG)
x=roller$weight
y=roller$depression
plot(depression~weight, data=roller)
fit <- lm(depression~weight, data=roller)
abline(fit, col="red")
par(mfrow=c(2,2))
plot(fit)
library(DAAG)
x=roller$weight
y=roller$depression
plot(depression~weight, data=roller)
fit <- lm(depression~weight, data=roller)
abline(fit, col="red")
#par(mfrow=c(2,2))
#plot(fit)
library(DAAG)
x=roller$weight
y=roller$depression
plot(depression~weight, data=roller)
fit <- lm(depression~weight, data=roller)
abline(fit, col="red")
par(mfrow=c(2,2))
plot(fit)
auto
Auto
bp=read.table("bloodpress.txt", header = TRUE, sep = "" )
bp_fit <- lm(BP~., data = bp)
pairs(bp)
bp
bp=read.table("bloodpress.txt", header = TRUE, sep = "" )
bp_fit <- lm(BP~., data = bp)
pairs(bp)
cor(bp)
bp=read.table("bloodpress.txt", header = TRUE, sep = "" )
bp_fit <- lm(BP~., data = bp)
pairs(bp)
cor(bp)
vif(bp_fit)
bp=read.table("bloodpress.txt", header = TRUE, sep = "" )
bp_fit <- lm(BP~., data = bp)
pairs(bp)
cor(bp)
print(vif(bp_fit))
bp=read.table("bloodpress.txt", header = TRUE, sep = "" )
bp_fit <- lm(BP~., data = bp)
pairs(bp)
cor(bp)
vif(bp_fit)
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
n
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
plot(n~x)
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
pois_glm <- glm(x~n, family = poisson)
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
pois_glm <- glm(x~n, family = poisson)
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
pois_glm <- glm(n~x, family = poisson)
coef(pois_glm)
plot(n~x)
curve(pois_glm, col="red")
coef(pois_glm)
coef(pois_glm)[0]
coef(pois_glm)[1]
coef(pois_glm)[[1]]
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
pois_glm <- glm(n~x, family = poisson)
coef(pois_glm)
plot(n~x)
curve(exp(coef(pois_glm)[[1]]+coef(pois_glm)[[2]]*x), col="red")
x <- rnorm(100)
lamda <- exp(1-x)
n <- rpois(100, lamda)
pois_glm <- glm(n~x, family = poisson)
coef(pois_glm)
plot(n~x)
curve(exp(coef(pois_glm)[[1]]+coef(pois_glm)[[2]]*x), add=TRUE,col="red")
print(coef(pois_glm))
x <- rnorm(100)
p <- [exp(1-x)]/[1+exp(1-x)]
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
print(coef(binom_glm))
plot(n~x)
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
print(coef(binom_glm))
plot(n~x)
newest <- -2:2 # predict at these target speeds
lines(newest, predict(binom_glm,
newdata=data.frame(x = newest), type = "response"))
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
print(coef(binom_glm))
plot(n~x)
newest <- -3:3 # predict at these target speeds
lines(newest, predict(binom_glm,
newdata=data.frame(x = newest), type = "response"))
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
print(coef(binom_glm))
plot(n~x)
newest <- -10:10 # predict at these target speeds
lines(newest, predict(binom_glm,
newdata=data.frame(x = newest), type = "response"))
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
print(coef(binom_glm))
plot(n~x)
newest <- -3:3
lines(newest, predict(binom_glm,
newdata=data.frame(x = newest), type = "response"))
x <- rnorm(100)
p <- (exp(1-x))/(1+exp(1-x))
n <- rbinom(100, 1, prob=p)
binom_glm <- glm(n~x, family = binomial)
print(coef(binom_glm))
# plot(n~x)
# newest <- -3:3
# lines(newest, predict(binom_glm,
# newdata=data.frame(x = newest), type = "response"))
