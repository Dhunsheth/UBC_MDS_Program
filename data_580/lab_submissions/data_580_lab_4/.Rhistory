z
z
Z
xbar<-apply(Z,2,mean)
std<-apply(Z,2,sd)
(xbar-3)/(std/sqrt(5))
tstat<-(xbar-3)/(std/sqrt(5))
hist(tstat)
curve(dt)
curve(dt())
curve(dt(1000))
t_act<-rt(1000)
curve(rt(4))
curve(rt(1000,4))
t_act<-rt(1000,4)
curve(t_act
)
t_act
curve(t_act)
curve(dt(x, df = 4), 0, 40, col = 2, add = TRUE)
curve(dt(x, df = 4), -2, 2, col = 2, add = TRUE)
curve(dt(x, df = 4), add = TRUE)
hist(tstat, freq = FALSE)
curve(dt(x, df = 4), add = TRUE)
N <- 1000; n <- 5; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 20
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 5; mu <- 3; sigma <- 20
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 10; mu <- 3; sigma <- 20
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 20
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 20
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
N <- 1000; n <- 8; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
x<-runif(1000,min=10,max=11)
t<-runif(1000,min=15,max=20)
mean(3*x*t*((x+(t/5)- 13)/5))
x<-runif(1000,min=10,max=11)
t<-runif(1000,min=15,max=20)
mean(3*x*t*((x+(t/5)- 13)/5))*(5*1)
x<-runif(100000,min=10,max=11)
t<-runif(100000,min=15,max=20)
mean(3*x*t*((x+(t/5)- 13)/5))*(5*1)
sensor <- read_csv("sensor.csv")
for (i in seq(1,length(sensor$timestamp),1)){
sensor$day[i] <- as.double(substr(sensor$timestamp[i],8,9))
sensor$time[i] <- substr(sensor$timestamp[i],45,52)
}
sensor$value <- as.double(sensor$value)
sensors_clean <- filter(sensor, value <= 100 && value >= 0)
sensors_clean
sensors_clean$value
range(sensors_clean$value)
map_dbl(sensors, function(x) median(x, na.rm  = TRUE))
map_dbl(sensor, function(x) median(x, na.rm  = TRUE))
map_dbl(sensor, function(x) min(x, na.rm  = TRUE))
map_dbl(sensor, function(x) mean(x, na.rm  = TRUE))
help(as_tibble())
help(as_tibble
help(as_tibble)
help(as_tibble)
data_1 <- read_csv("rquizdata.csv")
# Load the required libraries
library(readr)
library(dplyr)
library(ggplot2)
# Read the CSV file into a dataframe
df <- read_csv("rquizdata.csv")
# Print the first 5 rows of the dataframe
head(df, 5)
# Get an overview of the dataframe
summary(df)
# Add a new column "fullname"
df <- df %>%
mutate(fullname = paste(firstname, lastname, sep = " "))
# Add a new column "management"
df <- df %>%
mutate(management = ifelse(salary > 50000 & age > 45, "Y", "N"))
# Calculate and print the average age
cat("Average Age:", mean(df$age), "\n")
# Calculate and print the maximum salary
cat("Maximum Salary:", max(df$salary), "\n")
# Calculate and print the average salary for females
avg_salary_females <- df %>%
filter(gender == "Female") %>%
summarize(avg_salary = mean(salary))
cat("Average Salary for Females:", avg_salary_females$avg_salary, "\n")
# Calculate and print the average salary for males
avg_salary_males <- df %>%
filter(gender == "Male") %>%
summarize(avg_salary = mean(salary))
cat("Average Salary for Males:", avg_salary_males$avg_salary, "\n")
# Create a bar chart for the number of females and males
gender_counts <- df %>%
group_by(gender) %>%
summarize(count = n())
ggplot(data = gender_counts, aes(x = gender, y = count)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Gender", y = "Count") +
ggtitle("Number of Females and Males")
# Create boxplots to visualize salary for females and males
ggplot(df, aes(x = gender, y = salary, fill = gender)) +
geom_boxplot() +
labs(x = "Gender", y = "Salary") +
ggtitle("Salary Distribution for Females and Males")
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
seq(1,10,1)
summary(df)
cat("Average Age:", mean(df$age), "\n")
map_dbl(df['age'], function(x) mean(x, na.rm  = TRUE))
map_dbl(df['salary'], function(x) max(x, na.rm  = TRUE))
cat("Maximum Salary:", max(df$salary), "\n")
cat("Average Salary for Females:", avg_salary_females$avg_salary, "\n")
map_dbl(filter(df, gender == "Female"), function(x) mean(x, na.rm  = TRUE))
str(df)
map_dbl(filter(df, gender == "F"), function(x) mean(x, na.rm  = TRUE))
map_dbl(filter(df, gender = "F"), function(x) mean(x, na.rm  = TRUE))
map_dbl(filter(df['gender'], gender = "F"), function(x) mean(x, na.rm  = TRUE))
a<- map_dbl(filter(df['gender'], gender = "F"), function(x) mean(x, na.rm  = TRUE))
a
avg_salary_females <- df %>%
filter(gender == "F") %>%
summarize(avg_salary = mean(salary))
cat("Average Salary for Females:", avg_salary_females$avg_salary, "\n")
df['gender']
map_dbl(filter(df['salary'], gender = "F"), function(x) mean(x, na.rm  = TRUE))
a<- map_dbl(filter(df['salary'], gender = "F"), function(x) mean(x, na.rm  = TRUE))
a
a<- map_dbl(filter(df, gender = "F"), function(x) mean(x, na.rm  = TRUE))
a
a<- map_dbl(filter(df, gender == "F"), function(x) mean(x, na.rm  = TRUE))
fem <- df %>% filter(gender = "F")
fem
fem <- df %>% filter(gender = "F")
fem
fem <- df %>% filter(gender == "F")
fem
mean(fem$salary)
females <- df %>% filter(gender == "F")
avg_salary_female <- mean(females$salary)
avg_salary_females
avg_salary_female <- as.double(mean(females$salary))
avg_salary_females
males <- df %>% filter(gender == "M")
avg_salary_male <- as.double(mean(males$salary))
avg_salary_males
avg_salary_males <- df %>%
filter(gender == "Male") %>%
summarize(avg_salary = mean(salary))
cat("Average Salary for Males:", avg_salary_males$avg_salary, "\n")
males
males <- df %>% filter(gender == "M") %>% filter(salary != NaN)
males
males <- df %>% filter(gender == "M") %>% filter(salary != NA)
males
males$salary
males <- df %>% filter(gender == "M")
males$salary
males
mean(males$salary)
males <- df %>% filter(gender == "M")
avg_salary_male <- as.double(mean(males$salary, na.rm = TRUE))
avg_salary_males
males
mean(males$salary)
avg_salary_male <- mean(males$salary)
avg_salary_male
males <- df %>% filter(gender == "M")
avg_salary_male <- mean(males$salary)
avg_salary_male
gender_counts <- df %>%
group_by(gender) %>%
summarize(count = n())
ggplot(data = gender_counts, aes(x = gender, y = count)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Gender", y = "Count") +
ggtitle("Number of Females and Males")
gender_counts <- df %>%
group_by(gender) %>%
summarize(count = n())
ggplot(data = gender_counts, aes(x = gender, y = count)) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Gender", y = "Count") +
ggtitle("Number of Females and Males")
ggplot(df, aes(x = gender, y = salary, fill = gender)) +
geom_boxplot() +
labs(x = "Gender", y = "Salary") +
ggtitle("Salary Distribution for Females and Males")
as.double(mean(males$salary))
average_vector <- colMeans(df, na.rm = TRUE)
df <- read.csv("examdata.csv")
average_vector <- colMeans(df, na.rm = TRUE)
df
map_dbl(df, function(x) mean(x, na.rm  = TRUE))
unique_elements_list <- lapply(df, function(x) length(unique(x)))
print(unique_elements_list)
avg_vect <- map_dbl(df, function(x) mean(x, na.rm  = TRUE))
print(avg_vect)
df
str(df)
df_nums <- select(df, "age", "height", "weight")
mean(df_nums)
average_vector <- colMeans(df_nums, na.rm = TRUE)
print(average_vector)
df_nums <- select(df, "age", "height", "weight")
average_vector <- colMeans(df_nums, na.rm = TRUE)
print(average_vector)
df$weight_kg <- df$weight * 0.4535
str(df)
df$BMI <- calculateBMI(df$height, df$weight_kg)
calculateBMI <- function(height_cm, weight_kg) {
height_meters <- height_cm / 100  # Convert height to meters
BMI <- weight_kg / (height_meters * height_meters)
return(BMI)
}
df$BMI <- calculateBMI(df$height, df$weight_kg)
str(df)
mean(df$BMI, na.rm = TRUE)
average_BMI <- mean(df$BMI, na.rm = TRUE)
print(average_BMI)
calculateBMI(175, 70)
expect_error(calculateBMI(hello, 50), " ")
alculateBMI(hello, 50)
calculateBMI(hello, 50)
calculateBMI("hello", 50)
expect_equal(calculateBMI(175, 70), 22.85714)
expect_equal(calculateBMI(175, 70), 22.85714, tolerance = 0.02)
expect_true(calculateBMI(155, 72))
expect_true(calculateBMI(155, 72), "Error")
expect_output(typeof(calculateBMI(155, 72)), "double")
typeof(calculateBMI(155, 72))
expect_output(typeof(calculateBMI(155, 72)), "double")
expect_output(print(typeof(calculateBMI(155, 72))), "double")
expect_true(calculateBMI(155, 72), "Did not return a boolean value")
-1 < FALSE
seq(1,10,1)
length(seq(1,10,1))
as.logical(calculateBMI(155, 72))
expect_true(as.logical(calculateBMI(155, 72)), NA)
pnorm(-2.5)
pnorm(2.53)-pnorm(-1.26)
N <- 1000; n <- 5; mu <- 3; sigma <- 7
normalsamples <- matrix(rnorm(N*n, mean = mu, sd = sigma), nrow=n)
xbar <- apply(normalsamples, 2, mean)
std <- apply(normalsamples, 2, sd)
tstat <- (xbar - mu)/(std/sqrt(n))
hist(tstat, freq = FALSE)
curve(dt(x, df = n - 1), add = TRUE)
cos(x = pi/4)
qnorm(1-0.025)
qnorm(1-0.025)
17+1.96*3/sqrt(225)
17-1.96*3/sqrt(225)
setwd("C:/Users/Dhuns/Documents/ubc/school_work/block_1/data_580/submissions/Lab_4")
knitr::opts_chunk$set(echo = TRUE)
m <- 10000; n <- 100; sigma <- 5
# m samples of size n:
M <- matrix(rnorm(m*n, mean = 3, sd = sigma), nrow=n)
xbar <- apply(M, 2,mean)
est <- mean(xbar>4.5)
est
1-pnorm((4.5-3)/sqrt(25/n))
1-2*pnorm((4.5-3)/sqrt(25/n))
1-*pnorm((4.5-3)/sqrt(25/n))
1-pnorm((4.5-3)/sqrt(25/n))
sigmahat=apply(M, 2,sd)
plot(sigmahat ~ xbar)
sigmahat=apply(M, 2,sd)
plot(sigmahat ˜ xbar)
sigmahat=apply(M, 2,sd)
plot(sigmahat~xbar)
sigmahat=apply(M, 2,sd)
plot(sigmahat,xbar)
xbar
sigmahat
sigmahat
xbar
sigmahat=apply(M, 2,sd)
plot(xbar ~ sigmahat)
left_side = mean(xbar/sigmahat)
right_side = mean(xbar)*mean(1/sigmahat)
left_side = mean(xbar/sigmahat)
right_side = mean(xbar)*mean(1/sigmahat)
print(left_side)
print(right_side)
n <- 100
Z <- numeric(n)
eps <- rnorm(n, mean=0.2, sd=1)
for (i in 1:n) {
Z0 <- phi1*Z0 + eps[i]
Z[i] <- Z0
n <- 100
Z <- numeric(n)
eps <- rnorm(n, mean=0.2, sd=1)
for (i in 1:n) {
Z0 <- phi1*Z0 + eps[i]
Z[i] <- Z0
}
n <- 100
Z <- numeric(n)
phi1 <- 0.2
eps <- rnorm(n, sd=1)
for (i in 1:n) {
Z0 <- phi1*Z0 + eps[i]
Z[i] <- Z0
}
n <- 100
Z <- numeric(n)
phi1 <- 0.2
eps <- rnorm(n, sd=1)
Z0 <- rnorm(1, sd = 1)
for (i in 1:n) {
Z0 <- phi1*Z0 + eps[i]
Z[i] <- Z0
}
z
Z
acf(Z)
phi1 <- 0.2
Z <- arima.sim(100, model = list(ar = phi1), sd =1)
acf(Z)
acf(Z)
}
acf(Z)
}
acf(Z)
}
phi1 <- 0.2
Z <- arima.sim(100, model = list(ar = phi1), sd = 1)
}
phi1 <- 0.2
Z <- arima.sim(100, model = list(ar = phi1), sd = 1)
}
acf(Z)
}
phi1 <- 0.2
Z <- arima.sim(100, model = list(ar = phi1), sd = 1)
acf(Z, lag=100)
}
phi1 <- 0.2
Z <- arima.sim(100, model = list(ar = phi1), sd = 1)
acf(Z, lag=100)
}
phi2 <- -0.8
Z2 <- arima.sim(100, model = list(ar = phi2), sd = 1)
acf(Z2, lag=100)
phi2 <- -0.8
Z2 <- arima.sim(100, model = list(ar = phi2), sd = 1)
acf(Z2, lag=100)
set.seed(1333)
x <- seq(0, 1, length=100)
eps_i <- rnorm(100, sd = 1)
eps_ii <- arima.sim(100, model = list(ar = 0.8), sd = 1)
y0 <- 2 + 3*x + eps_i
y1 <- 2 + 3*x + eps_ii
y0.lm <- lm(y0 ~ x)
y1.lm <- lm(y1 ~ x)
print(coef(y0.lm))
print(coef(y1.lm))
x=8
Y0 <- 2.877*x + 2.078
Y1 <- 1.170*x + 1.806
true_exp <- 2+3*x
print(Y0)
print(Y1)
print(true_exp)
set.seed(1333)
x <- seq(0, 1, length=100)
eps_i <- rnorm(100, sd = 1)
y0 <- 2 + 3*x + eps_i
set.seed(1333)
eps_ii <- arima.sim(100, model = list(ar = 0.8), sd = 1)
y1 <- 2 + 3*x + eps_ii
y0.lm <- lm(y0 ~ x)
y1.lm <- lm(y1 ~ x)
print(coef(y0.lm))
print(coef(y1.lm))
x=8
Y0 <- 2.877*x + 2.078
Y1 <- 2.053*x + 3.417
true_exp <- 2+3*x
print(Y0)
print(Y1)
print(true_exp)
x=0.8
Y0 <- 2.877*x + 2.078
Y1 <- 2.053*x + 3.417
true_exp <- 2+3*x
print(Y0)
print(Y1)
print(true_exp)
x=0.8
Y0 <- 2.877*x + 2.078
Y1 <- 3.417*x + 2.053
true_exp <- 2+3*x
print(Y0)
print(Y1)
print(true_exp)
m <- 10000; n <- 100; sigma <- 5
# m samples of size n:
M <- matrix(rnorm(m*n, mean = 3, sd = sigma), nrow=n)
xbar <- apply(M, 2,mean)
estimate <- mean(xbar>4.5)
theory <- 1-pnorm((4.5-3)/sqrt(25/n))
estimate <- mean(xbar>4.5)
theory <- 1-pnorm((4.5-3)/sqrt(25/n))
m <- 10000; n <- 100; sigma <- 5
# m samples of size n:
M <- matrix(rnorm(m*n, mean = 3, sd = sigma), nrow=n)
xbar <- apply(M, 2,mean)
estimate <- mean(xbar>4.5)
print(estimate)
theory <- 1-pnorm((4.5-3)/sqrt(25/n))
print(theory)
m <- 10000; n <- 100; sigma <- 5
M <- matrix(rnorm(m*n, mean = 3, sd = sigma), nrow=n)
xbar <- apply(M, 2,mean)
estimate <- mean(xbar>4.5)
print(estimate)
theory <- 1-pnorm((4.5-3)/sqrt(25/n))
print(theory)
m <- 10000; n <- 100; sigma <- 5
M <- matrix(rnorm(m*n, mean = 3, sd = sigma), nrow=n)
xbar <- apply(M, 2,mean)
estimate <- mean(xbar>4.5)
print(estimate)
theory <- 1-pnorm((4.5-3)/sqrt(25/n))
print(theory)
